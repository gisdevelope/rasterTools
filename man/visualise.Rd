% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualise.R
\name{visualise}
\alias{visualise}
\title{Visualise gridded objects and geometries}
\usage{
visualise(gridded = NULL, geom = NULL, theme = NULL, trace = FALSE,
  image = FALSE, new = TRUE, ...)
}
\arguments{
\item{gridded}{[\code{Raster*} | \code{matrix}]\cr Gridded object.}

\item{geom}{[\code{geom}]\cr Object of class \code{\link{geom}}.}

\item{theme}{[\code{list(7)}]\cr Visualising options; see
\code{\link{setTheme}} for details.}

\item{trace}{[\code{logical(1)}]\cr Print the gridded object's history (i.e.
the process according to which it has been created) (\code{TRUE}), or
simply plot the object (\code{FALSE}, default).}

\item{image}{[\code{logical(1)}]\cr Does \code{gridded} have the channels
\code{red}, \code{green} and \code{blue}, i.e. is it an "image"
(\code{TRUE}) or is this not the case (\code{FALSE}, default)?}

\item{new}{[\code{logical(1)}]\cr force a new plot (\code{TRUE}, default).}

\item{...}{[various]\cr Graphical parameters to \code{geom}.}
}
\value{
Returns invisibly an object of class \code{recordedplot}, see
  \code{\link{recordPlot}} for details (and warnings).
}
\description{
Visualise gridded objects and geometries
}
\details{
To create a plot with your own style, design it with
  \code{\link{setTheme}} and use it in \code{theme}.

  In case you want to plot an image (simiar to \code{\link[raster]{plotRGB}}),
  you have to provide a \code{RasterStack} or \code{RasterBrick} with the
  three layers \code{red}, \code{green} and \code{blue} and set \code{image =
  TRUE}.
}
\examples{
input <- rtData$continuous
binarised <- rBinarise(input, thresh = 40)
visualise(gridded = rDistance(binarised), trace = TRUE)

# visualise also RasterBrick/-Stack objects
getDistances <- list(disEuc = list(operator = "rDistance"),
                     disMht = list(operator = "rDistance",
                                   method = "manhattan"),
                     disChb = list(operator = "rDistance",
                                   method = "chessboard"))
distances <- modify(input = binarised, by = getDistances, merge = TRUE)
distances <- raster::brick(binarised, distances)
visualise(distances)

# define a geometry
coords <- data.frame(x = c(30, 60, 60, 40),
                     y = c(40, 40, 60, 70),
                     id = 1)
window <- data.frame(x = c(0, 80),
                     y = c(0, 80))
(aGeom <- geomPolygon(anchor = coords, window = window, col = "blue"))

# if plotted on top of an existing plot, the relative coordinate values
# will be used to construct the grob.
visualise(gridded = input, geom = aGeom)
visualise(geom = aGeom, new = TRUE)

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify.operators.R
\name{rRescale}
\alias{rRescale}
\title{Change the resolution of a raster}
\usage{
rRescale(obj, factor = NULL, kernelFunction = NULL)
}
\arguments{
\item{factor}{[\code{integer(1)} | \code{numeric(1)}]\cr an integer for
up-scaling and a fraction for down-scaling (see Details).}

\item{kernelFunction}{[\code{kernelFunction}]\cr A kernel function to
determine new values of the rescaled raster, defaulting to
\code{boxKernel()}; see Details.}

\item{ras}{[\code{RasterLayer(1)}]\cr The object to modify.}
}
\value{
A \code{RasterLayer} with a dimension that has been up or down-scaled
  from \code{obj}, where the new values have been determined by applying
  \code{kernelFunction}.
}
\description{
Rescaling a raster changes the raster's resolution.
}
\details{
The factor is a value by which the number of cells in x and y
  dimension will be multiplied. If the raster should be up-scaled
  (\code{factor > 1}), only integer values are allowed (will be truncated if
  it is not an integer). If the raster should be down-scaled (\code{factor <
  1}) any inverse of an integer value (1/n) is allowed (denominator will be
  rounded to the next integer, such as 1/2 or 1/5).

  The \code{kernelFunction} used here deviates from the other
  (morpholological) kernels in that it is a function, which interpolates the
  values of new cells. See \code{\link[mmand]{kernelFunction}} for an
  in-depth description.
}
\examples{
input <- rtData$continuous
visualise(input)
visualise(rRescale(input, factor = 0.5))

# up-scaling can be useful for follow-up morphological operations
binarised <- rBinarise(input, thresh = 30)
visualise(rSkeletonise(binarised))

rescaled <- rRescale(binarised, factor = 2)
visualise(rSkeletonise(rescaled), new = TRUE)
}
\seealso{
Other operators to modify a raster: \code{\link{rBlend}},
  \code{\link{rReduce}}, \code{\link{rSegregate}}
}

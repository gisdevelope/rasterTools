// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// matInGeomC
NumericMatrix matInGeomC(NumericMatrix& mat, NumericMatrix& geom, bool negative);
RcppExport SEXP _rasterTools_matInGeomC(SEXP matSEXP, SEXP geomSEXP, SEXP negativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type geom(geomSEXP);
    Rcpp::traits::input_parameter< bool >::type negative(negativeSEXP);
    rcpp_result_gen = Rcpp::wrap(matInGeomC(mat, geom, negative));
    return rcpp_result_gen;
END_RCPP
}
// cellToPointsC
DataFrame cellToPointsC(NumericMatrix mat);
RcppExport SEXP _rasterTools_cellToPointsC(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(cellToPointsC(mat));
    return rcpp_result_gen;
END_RCPP
}
// countCellsC
DataFrame countCellsC(NumericMatrix& mat);
RcppExport SEXP _rasterTools_countCellsC(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(countCellsC(mat));
    return rcpp_result_gen;
END_RCPP
}
// countEdgesC
DataFrame countEdgesC(NumericMatrix& mat);
RcppExport SEXP _rasterTools_countEdgesC(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(countEdgesC(mat));
    return rcpp_result_gen;
END_RCPP
}
// countAdjacenciesC
NumericMatrix countAdjacenciesC(NumericMatrix& mat, bool countDouble);
RcppExport SEXP _rasterTools_countAdjacenciesC(SEXP matSEXP, SEXP countDoubleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< bool >::type countDouble(countDoubleSEXP);
    rcpp_result_gen = Rcpp::wrap(countAdjacenciesC(mat, countDouble));
    return rcpp_result_gen;
END_RCPP
}
// diamondSquareC
NumericMatrix diamondSquareC(NumericMatrix mat, NumericVector stepSize, double roughness, double startDev);
RcppExport SEXP _rasterTools_diamondSquareC(SEXP matSEXP, SEXP stepSizeSEXP, SEXP roughnessSEXP, SEXP startDevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stepSize(stepSizeSEXP);
    Rcpp::traits::input_parameter< double >::type roughness(roughnessSEXP);
    Rcpp::traits::input_parameter< double >::type startDev(startDevSEXP);
    rcpp_result_gen = Rcpp::wrap(diamondSquareC(mat, stepSize, roughness, startDev));
    return rcpp_result_gen;
END_RCPP
}
// getValuesMatC
NumericVector getValuesMatC(NumericMatrix& mat);
RcppExport SEXP _rasterTools_getValuesMatC(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(getValuesMatC(mat));
    return rcpp_result_gen;
END_RCPP
}
// isBinaryC
bool isBinaryC(NumericMatrix mat);
RcppExport SEXP _rasterTools_isBinaryC(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(isBinaryC(mat));
    return rcpp_result_gen;
END_RCPP
}
// meijsterDistanceC
NumericMatrix meijsterDistanceC(NumericMatrix mat, String method);
RcppExport SEXP _rasterTools_meijsterDistanceC(SEXP matSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(meijsterDistanceC(mat, method));
    return rcpp_result_gen;
END_RCPP
}
// morphC
NumericMatrix morphC(NumericMatrix& mat, NumericMatrix& kernel, NumericVector& value, int blend, int merge, bool rotateKernel, bool strictKernel);
RcppExport SEXP _rasterTools_morphC(SEXP matSEXP, SEXP kernelSEXP, SEXP valueSEXP, SEXP blendSEXP, SEXP mergeSEXP, SEXP rotateKernelSEXP, SEXP strictKernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type blend(blendSEXP);
    Rcpp::traits::input_parameter< int >::type merge(mergeSEXP);
    Rcpp::traits::input_parameter< bool >::type rotateKernel(rotateKernelSEXP);
    Rcpp::traits::input_parameter< bool >::type strictKernel(strictKernelSEXP);
    rcpp_result_gen = Rcpp::wrap(morphC(mat, kernel, value, blend, merge, rotateKernel, strictKernel));
    return rcpp_result_gen;
END_RCPP
}
// scaleMatrixC
NumericMatrix scaleMatrixC(NumericMatrix mat, NumericVector range);
RcppExport SEXP _rasterTools_scaleMatrixC(SEXP matSEXP, SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleMatrixC(mat, range));
    return rcpp_result_gen;
END_RCPP
}
// subNumNumC
NumericMatrix subNumNumC(NumericMatrix& mat, NumericVector& replace, NumericVector with);
RcppExport SEXP _rasterTools_subNumNumC(SEXP matSEXP, SEXP replaceSEXP, SEXP withSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type with(withSEXP);
    rcpp_result_gen = Rcpp::wrap(subNumNumC(mat, replace, with));
    return rcpp_result_gen;
END_RCPP
}
// subChrIntC
IntegerMatrix subChrIntC(CharacterMatrix& mat, CharacterVector& replace, IntegerVector& with);
RcppExport SEXP _rasterTools_subChrIntC(SEXP matSEXP, SEXP replaceSEXP, SEXP withSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type with(withSEXP);
    rcpp_result_gen = Rcpp::wrap(subChrIntC(mat, replace, with));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rasterTools_matInGeomC", (DL_FUNC) &_rasterTools_matInGeomC, 3},
    {"_rasterTools_cellToPointsC", (DL_FUNC) &_rasterTools_cellToPointsC, 1},
    {"_rasterTools_countCellsC", (DL_FUNC) &_rasterTools_countCellsC, 1},
    {"_rasterTools_countEdgesC", (DL_FUNC) &_rasterTools_countEdgesC, 1},
    {"_rasterTools_countAdjacenciesC", (DL_FUNC) &_rasterTools_countAdjacenciesC, 2},
    {"_rasterTools_diamondSquareC", (DL_FUNC) &_rasterTools_diamondSquareC, 4},
    {"_rasterTools_getValuesMatC", (DL_FUNC) &_rasterTools_getValuesMatC, 1},
    {"_rasterTools_isBinaryC", (DL_FUNC) &_rasterTools_isBinaryC, 1},
    {"_rasterTools_meijsterDistanceC", (DL_FUNC) &_rasterTools_meijsterDistanceC, 2},
    {"_rasterTools_morphC", (DL_FUNC) &_rasterTools_morphC, 7},
    {"_rasterTools_scaleMatrixC", (DL_FUNC) &_rasterTools_scaleMatrixC, 2},
    {"_rasterTools_subNumNumC", (DL_FUNC) &_rasterTools_subNumNumC, 3},
    {"_rasterTools_subChrIntC", (DL_FUNC) &_rasterTools_subChrIntC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rasterTools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
